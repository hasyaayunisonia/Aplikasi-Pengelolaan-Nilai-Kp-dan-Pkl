/* eslint-disable no-restricted-globals */
import React, { useState, useEffect } from 'react'
import 'antd/dist/reset.css'
import { CCard, CCardBody, CCol, CRow } from '@coreui/react'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faPlus } from '@fortawesome/free-solid-svg-icons'
import { Button, Col, Row, Table, Tooltip, Spin, Tabs } from 'antd'
import { LoadingOutlined } from '@ant-design/icons'
import { useNavigate } from 'react-router-dom'
import { useParams } from 'react-router-dom'
import axios from 'axios'

const antIcon = <LoadingOutlined style={{ fontSize: 40 }} spin />

const ListPesertaSeminar = () => {
  const { id } = useParams()
  const [isLoading, setIsLoading] = useState(true)
  const [data, setData] = useState([])
  const [namaPerusahaan, setNamaPerusahaan] = useState([])

  let history = useNavigate()

  const nilaiSeminar = (id) => {
    history(`/nilaiseminar/penilaianseminar/listpeserta/tambahnilaipeserta/${id}`)
  }

  useEffect(() => {
    if (!id) {
      history.push('/')
    } else {
      const getPerusahaan = async () => {
        axios.defaults.withCredentials = true
        await axios
          .get(`/api/seminar/company`)
          .then((res) => {
            setIsLoading(false)
            // console.log(res.data.data)
            const cek = res.data.data
            // console.log(cek)
            const perusahaanData = res.data.data.find((row) => row.id === parseInt(id))
            // console.log(perusahaanData)
            if (perusahaanData) {
              setNamaPerusahaan(perusahaanData.name)
            }
            // console.log(namaPerusahaan)
          })
          .catch(function (error) {
            if (error.toJSON().status >= 300 && error.toJSON().status <= 399) {
              history.push('/dashboard')
            } else if (error.toJSON().status >= 400 && error.toJSON().status <= 499) {
              history.push('/404')
            } else if (error.toJSON().status >= 500 && error.toJSON().status <= 599) {
              history.push('/500')
            }
          })
      }

      const getPesertaSeminar = async () => {
        axios.defaults.withCredentials = true
        await axios
          .get(`/api/seminar/company/${id}`)
          .then((res) => {
            setIsLoading(false)
            res.data.data
              ? setData(
                  res.data.data.map((row) => ({
                    id: row.id,
                    name: row.name,
                    nim: row.nim,
                  })),
                )
              : console.log('peserta tidak ada')
          })
          .catch(function (error) {
            if (error.toJSON().status >= 300 && error.toJSON().status <= 399) {
              history.push('/dashboard')
            } else if (error.toJSON().status >= 400 && error.toJSON().status <= 499) {
              history.push('/404')
            } else if (error.toJSON().status >= 500 && error.toJSON().status <= 599) {
              history.push('/500')
            }
          })
      }
      getPerusahaan()
      getPesertaSeminar()
    }
  }, [history, id])

  useEffect(() => {
    console.log(namaPerusahaan)
  }, [namaPerusahaan])

  const columns = [
    {
      title: 'No',
      dataIndex: 'no',
      width: '5%',
      align: 'center',
      render: (value, item, index) => {
        return index + 1
      },
    },
    {
      title: 'Nama Peserta',
      dataIndex: 'name',
    },
    {
      title: 'NIM',
      align: 'center',
      dataIndex: 'nim',
    },
    {
      title: 'Aksi',
      dataIndex: 'action',
      width: '20%',
      align: 'center',
      render: (text, record) => (
        <>
          <Row>
            <Col span={24} style={{ textAlign: 'center' }}>
              <Button
                id="detail"
                size="small"
                shape="square"
                style={{ color: 'fffff', background: '#00BFFF' }}
                onClick={() => nilaiSeminar(record.id)}
              >
                <FontAwesomeIcon icon={faPlus} style={{ color: 'fffff', align: 'center' }} />
              </Button>
            </Col>
          </Row>
        </>
      ),
    },
  ]

  return isLoading ? (
    <Spin indicator={antIcon} />
  ) : (
    <>
      <CCard className="mb-4">
        <CCardBody>
          <CRow>
            <CCol sm={12}>
              <h6>Peserta KP/PKL di perusahaan {namaPerusahaan}</h6>
              {/* <span>{perusahaan.map}</span> */}
              <Table scroll={{ x: 'max-content' }} columns={columns} dataSource={data} bordered />
            </CCol>
          </CRow>
        </CCardBody>
      </CCard>
    </>
  )
}
export default ListPesertaSeminar
