import React, { useState, useEffect } from 'react'
import 'antd/dist/reset.css'
import {
  CCard,
  CCardBody,
  CCardHeader,
  CCol,
  CRow,
  CTable,
  CTableHead,
  CTableDataCell,
  CFormCheck,
} from '@coreui/react'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faTrashCan, faPencil } from '@fortawesome/free-solid-svg-icons'
import {
  Button,
  Col,
  Row,
  Table,
  Modal,
  Input,
  Form,
  notification,
  Spin,
  Checkbox,
  message,
} from 'antd'
import { useNavigate } from 'react-router-dom'
import axios from 'axios'
import { LoadingOutlined } from '@ant-design/icons'
import debounce from 'lodash/debounce'

const antIcon = <LoadingOutlined style={{ fontSize: 40 }} spin />
const FormulirKriteriaSeminar = () => {
  const [loadings, setLoadings] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [isModalcreateVisible, setIsModalCreateVisible] = useState(false)
  const [isModalEditVisible, setIsModalEditVisible] = useState(false)
  const [listKriteria, setKriteria] = useState([])
  const [criteriaName, setCriteriaName] = useState('')
  const [choose, setChoose] = useState([])
  const [form] = Form.useForm()
  const [form1] = Form.useForm()
  const [form2] = Form.useForm()
  const history = useNavigate()
  const [total, setTotal] = useState(0)
  const [inputValues, setInputValues] = useState({})
  // let dataEdit;

  const enterLoading = (index) => {
    setLoadings((prevLoadings) => {
      const newLoadings = [...prevLoadings]
      newLoadings[index] = true
      return newLoadings
    })
  }

  const refreshData = (index) => {
    axios.get(`/api/seminar/criteria`).then((result) => {
      setKriteria(
        result.data.data.map((row) => ({
          name: row.criteria_name,
          id: row.id,
        })),
      )
      setLoadings((prevLoadings) => {
        const newLoadings = [...prevLoadings]
        newLoadings[index] = false
        return newLoadings
      })
    })
  }

  useEffect(() => {
    async function getlistKriteria() {
      axios.defaults.withCredentials = false
      await axios
        .get(`/api/seminar/criteria`)
        .then((res) => {
          setIsLoading(false)
          setKriteria(
            res.data.data,
            // .map((row) => ({
            //   name: row.criteria_name,
            //   id: row.id,
            //   bobot: row.criteria_bobot,
            // })),
          )
        })
        .catch(function (error) {
          if (error.toJSON().status >= 300 && error.toJSON().status <= 399) {
            history.push('/dashboard')
          } else if (error.toJSON().status >= 400 && error.toJSON().status <= 499) {
            history.push('/404')
          } else if (error.toJSON().status >= 500 && error.toJSON().status <= 599) {
            history.push('/500')
          }
        })
    }

    const calculateTotal = () => {
      let sum = 0
      listKriteria.forEach((item) => {
        const inputValue = parseFloat(item.input_value) || 0
        sum += inputValue
      })

      setTotal(sum)
    }
    getlistKriteria()
    calculateTotal()
  }, [history])

  // const kriteria = [
  //   { id: 1, name: 'Mengenali Perusahaan', selected: false },
  //   { id: 2, name: 'Budaya Perusahaan', selected: true },
  //   { id: 3, name: 'Suasana Kerja', selected: false },
  // ]

  const showModalCreate = () => {
    setIsModalCreateVisible(true)
  }

  const handleCancelCreate = () => {
    setIsModalCreateVisible(false)
  }

  const handleOkCreate = async (index) => {
    enterLoading(index)
    await axios
      .post(`/api/seminar/criteria`, {
        criteria_name: criteriaName,
      })
      .then((response) => {
        refreshData(index)
        notification.success({
          message: 'Kriteria seminar telah ditambahkan',
        })
        setCriteriaName('')
        setIsModalCreateVisible(false)
        form1.resetFields()
      })
      .catch((error) => {
        setIsModalCreateVisible(false)
        setCriteriaName('')
        form1.resetFields()
        setLoadings((prevLoadings) => {
          const newLoadings = [...prevLoadings]
          newLoadings[index] = false
          return newLoadings
        })
        notification.error({
          message: 'Kriteria tidak dapat ditambahkan!',
        })
      })
  }

  const showModalEdit = (record) => {
    // console.log(record)
    setIsModalEditVisible(true)
    setChoose(record)

    // dataEdit = record
    // console.log(dataEdit)
  }

  const handleOkEdit = async (index) => {
    enterLoading(index)
    await axios
      .put(`/api/seminar//criteria/update/${choose.id}`, {
        criteria_name: choose.criteria_name,
      })
      .then((response) => {
        refreshData(index)
        notification.success({
          message: 'Kriteria seminar berhasil diubah',
        })
        setIsModalEditVisible(false)
      })
      .catch((error) => {
        setIsModalEditVisible(false)
        setLoadings((prevLoadings) => {
          const newLoadings = [...prevLoadings]
          newLoadings[index] = false
          return newLoadings
        })
        notification.error({
          message: 'Kriteria seminar telah dipakai!',
        })
      })
  }

  const showModalDelete = (record, index) => {
    Modal.confirm({
      title: 'Konfirmasi hapus kriteria perusahaan',
      zIndex: 9999999,
      okText: 'Ya',
      onOk: () => {
        handleOkDelete(record, index)
      },
    })
  }

  const handleOkDelete = async (record, index) => {
    enterLoading(index)
    await axios
      .delete(`/api/seminar/criteria/delete/${record.id}`)
      .then((response) => {
        refreshData(index)
        notification.success({
          message: 'Kriteria seminar berhasil dihapus',
        })
      })
      .catch((error) => {
        setLoadings((prevLoadings) => {
          const newLoadings = [...prevLoadings]
          newLoadings[index] = false
          return newLoadings
        })
        notification.error({
          message: 'Kriteria seminar gagal dihapus!',
        })
      })
  }

  const handleCancelEdit = () => {
    setIsModalEditVisible(false)
  }

  const handleCheckboxChange = async (e, record) => {
    const isChecked = e.target.checked
    // Lakukan pembaruan pada data di sini jika diperlukan
    // Misalnya menggunakan Axios atau fetch untuk mengirim perubahan ke database
    console.log(isChecked, record)

    const updatedRecord = {
      ...record,
      is_selected: isChecked ? 1 : 0,
      criteria_bobot: isChecked ? record.criteria_bobot : 0,
    }

    try {
      // Kirim permintaan PUT menggunakan Axios
      // console.log(updatedRecord)
      await axios.put(`/api/seminar/criteria/update/${record.id}`, updatedRecord)

      // Perbarui data di state setelah berhasil mengirim perubahan ke server
      setKriteria((prevData) => {
        return prevData.map((item) => {
          if (item.id === record.id) {
            return updatedRecord
          }
          return item
        })
      })
    } catch (error) {
      console.error(error)
    }
  }

  // yg ini bisa tapi jadi nge-lag
  const handleInputChange = async (e, record) => {
    const { value } = e.target
    const updatedRecord = {
      ...record,
      criteria_bobot: value,
    }
    try {
      await axios.put(`/api/seminar/criteria/update/${record.id}`, updatedRecord)
      setKriteria((prevData) => {
        return prevData.map((item) => {
          if (item.id === record.id) {
            return updatedRecord
          }
          return item
        })
      })
      message.success('Bobot berhasil disimpan ke database')
    } catch (error) {
      console.error(error)
      message.error('Terjadi kesalahan saat menyimpan data')
    }
  }

  // debounce ga fungsi
  // const handleInputChange = debounce(async (e, record) => {
  //   const { value } = e.target
  //   const updatedRecord = {
  //     ...record,
  //     criteria_bobot: value,
  //   }

  //   try {
  //     // Kirim permintaan PUT menggunakan Axios
  //     await axios.put(`/api/seminar/criteria/update/${record.id}`, updatedRecord)

  //     // Perbarui data di state setelah berhasil mengirim perubahan ke server
  //     setKriteria((prevData) => {
  //       return prevData.map((item) => {
  //         if (item.id === record.id) {
  //           return updatedRecord
  //         }
  //         return item
  //       })
  //     })
  //   } catch (error) {
  //     console.error(error)
  //   }
  // }, 500)

  // const handleButtonClick = async () => {
  //   const { id, criteria_bobot } = record

  //   try {
  //     await axios.put(`/api/seminar/criteria/update/${id}`, { criteria_bobot })
  //     // Lakukan sesuatu setelah berhasil mengirim perubahan ke server
  //   } catch (error) {
  //     console.error(error)
  //   }
  // }
  // const handleInputChange = async (e, record) => {
  //   const { value } = e.target
  //   const updatedData = listKriteria.map((item) => {
  //     if (item.id === record.id) {
  //       return { ...item, criteria_bobot: value }
  //     }
  //     return item
  //   })
  //   setKriteria(updatedData)
  // }

  // const handleButtonClick = async () => {
  //   try {
  //     // Mengirim data input ke server menggunakan Axios PUT
  //     await axios.put(`/api/seminar/criteria/update/${listKriteria.id}`, { listKriteria })
  //     // Lakukan sesuatu setelah berhasil mengirim data ke server
  //   } catch (error) {
  //     console.error(error)
  //   }
  // }

  // const debouncedHandleInputChange = debounce(async (e, record) => {
  //   const { value } = e.target
  //   const updatedRecord = {
  //     ...record,
  //     criteria_bobot: value,
  //   }

  //   try {
  //     // Kirim permintaan PUT menggunakan Axios
  //     await axios.put(`/api/seminar/criteria/update/${record.id}`, updatedRecord)

  //     // Perbarui data di state setelah berhasil mengirim perubahan ke server
  //     setKriteria((prevData) => {
  //       return prevData.map((item) => {
  //         if (item.id === record.id) {
  //           return updatedRecord
  //         }
  //         return item
  //       })
  //     })
  //   } catch (error) {
  //     console.error(error)
  //   }
  // }, 300) // Waktu tunda (dalam milidetik)

  // // ...

  // const handleInputChange = (e, record) => {
  //   debouncedHandleInputChange(e, record)
  // }

  const columns = [
    {
      title: 'No',
      dataIndex: 'no',
      width: '1%',
      align: 'center',
      render: (value, item, index) => {
        return index + 1
      },
    },
    {
      title: 'List Kriteria Seminar',
      width: '20%',
      dataIndex: 'criteria_name',
    },
    {
      title: 'Pilih Kriteria',
      align: 'center',
      dataIndex: 'is_selected',
      key: 'is_selected',
      width: '1%',
      render: (text, record) => (
        <>
          <Row>
            <Col span={24} style={{ textAlign: 'center' }}>
              <Checkbox
                defaultChecked={text === 1}
                onChange={(e) => handleCheckboxChange(e, record)}
              />
            </Col>
          </Row>
        </>
      ),
    },
    {
      title: 'Tentukan Bobot',
      align: 'center',
      // dataIndex: 'is_selected',
      // key: 'value',
      width: '8%',
      render: (text, record) => (
        <>
          <Row>
            <Col span={12} style={{ textAlign: 'center' }}>
              <Input
                addonAfter="%"
                disabled={text.is_selected === 0}
                // onChange={(e) => handleInputChange(e, record)}
                value={text.criteria_bobot}
                // value={
                //   inputValues[record.id]?.criteria_bobot !== undefined
                //     ? String(inputValues[record.id]?.criteria_bobot)
                //     : String(text)
                // }
                onChange={(e) => handleInputChange(e, record)}
              />
            </Col>
            {/* <Col span={12} style={{ textAlign: 'center' }}>
              <Button
                id="button-submit"
                // size="sm"
                shape="square"
                hidden={text.is_selected === 0}
                style={{
                  color: 'white',
                  background: '#3399FF',
                  marginBottom: 16,
                  fontSize: '100%',
                }}
                // onClick={form.submit}
                // onClick={() => handleButtonClick(selectedRecord)}
              >
                Simpan
              </Button>
            </Col> */}
          </Row>
        </>
      ),
    },
    {
      title: 'Aksi',
      width: '3%',
      align: 'center',
      render: (text, record) => (
        <>
          <Row>
            <Col span={12} style={{ textAlign: 'center' }}>
              <Button
                id="button-pencil"
                htmlType="submit"
                shape="circle"
                style={{ backgroundColor: '#FCEE21', borderColor: '#FCEE21' }}
                onClick={() => {
                  showModalEdit(record)
                }}
              >
                <FontAwesomeIcon icon={faPencil} style={{ color: 'black' }} />
              </Button>
            </Col>
            <Col span={12} style={{ textAlign: 'center' }}>
              <Button
                id="button-trash"
                htmlType="submit"
                shape="circle"
                // loading={loadings[`delete-${record.id}`]}
                style={{ backgroundColor: '#e9033d', borderColor: '#e9033d' }}
                onClick={() => {
                  showModalDelete(record, `delete-${record.id}`)
                }}
              >
                <FontAwesomeIcon icon={faTrashCan} style={{ color: 'black' }} />
              </Button>
            </Col>
          </Row>
        </>
      ),
    },
  ]

  return isLoading ? (
    <Spin indicator={antIcon} />
  ) : (
    <>
      <CCard className="mb-4">
        <CCardHeader style={{ paddingLeft: '20px' }}>
          <h5>
            <b>Tentukan Kriteria-Kriteria Seminar</b>
          </h5>
        </CCardHeader>
        <CCardBody>
          <CRow>
            <CCol style={{ textAlign: 'right', paddingBottom: '15px' }}>
              <Button
                type="primary"
                htmlType="submit"
                className="px-4"
                id="createKriteria"
                style={{ backgroundColor: '#339900', borderColor: '#339900' }}
                onClick={showModalCreate}
              >
                Tambah Kriteria
              </Button>
            </CCol>
          </CRow>
          <Form
            form={form}
            name="basic"
            wrapperCol={{ span: 24 }}
            // onFinish={() => onFinish(0)}
            // onFinishFailed={onFinishFailed}
            autoComplete="off"
          >
            <Table
              scroll={{ x: 'max-content' }}
              columns={columns}
              dataSource={listKriteria}
              rowKey="id"
              bordered
            />
            {/* <table className="table table-bordered">
              <tr>
                <th>No</th>
                <th>List Kriteria Seminar</th>
                <th style={{ width: '15%', textAlign: 'center' }}>Pilih Kriteria</th>
                <th style={{ width: '10%', textAlign: 'center' }}>Tentukan Bobot</th>
                <th style={{ width: '10%', textAlign: 'center' }}>Aksi</th>
              </tr>
              {listKriteria.map((item, i) => (
                <tr key={i}>
                  <td> {i + 1}</td>
                  <td>{item.name}</td>
                  <td style={{ textAlign: 'center', verticalAlign: 'middle' }}>
                    <CFormCheck id="checkboxNoLabel" value="" aria-label="..." />
                  </td>
                  <td>
                    <Input
                      addonAfter="%"
                      // onChange={e => {
                      //     setBobot(pre => {
                      //         return { ...pre, bobotMinat: e.target.value }
                      //     })
                      // }} value={bobot.bobotMinat}
                    />
                  </td>
                  <td>
                    <Row>
                      <Col span={12} style={{ textAlign: 'center' }}>
                        <Button
                          id="button-pencil"
                          htmlType="submit"
                          shape="circle"
                          style={{ backgroundColor: '#FCEE21', borderColor: '#FCEE21' }}
                          onClick={() => {
                            showModalEdit(item)
                          }}
                        >
                          <FontAwesomeIcon icon={faPencil} style={{ color: 'black' }} />
                        </Button>
                      </Col>
                      <Col span={12} style={{ textAlign: 'center' }}>
                        <Button
                          id="button-trash"
                          htmlType="submit"
                          shape="circle"
                          // loading={loadings[`delete-${record.id}`]}
                          style={{ backgroundColor: '#e9033d', borderColor: '#e9033d' }}
                          onClick={() => {
                            showModalDelete()
                          }}
                        >
                          <FontAwesomeIcon icon={faTrashCan} style={{ color: 'black' }} />
                        </Button>
                      </Col>
                    </Row>
                  </td>
                </tr>
              ))}
            </table> */}
          </Form>
          <CRow>
            <CCol
              sm={12}
              // style={{ textAlign: 'right' }}
            >
              <div>Total: {total}</div>
              {total > 100 && <div style={{ color: 'red' }}>Total melebihi batas maksimum 100</div>}
              {/* <Button
                id="button-submit"
                size="sm"
                shape="square"
                // loading={loadings[0]}
                style={{ color: 'white', background: '#3399FF', marginBottom: 16 }}
                // onClick={form.submit}
                // onClick={() => handleButtonClick(selectedRecord)}
              >
                Simpan
              </Button> */}
            </CCol>
          </CRow>
        </CCardBody>
      </CCard>

      <Modal
        title="Tambah Kriteria"
        visible={isModalcreateVisible}
        onOk={form1.submit}
        onCancel={handleCancelCreate}
        width={600}
        zIndex={9999999}
        footer={[
          <Button key="back" onClick={handleCancelCreate}>
            Batal
          </Button>,
          <Button loading={loadings[1]} key="submit" type="primary" onClick={form1.submit}>
            Simpan
          </Button>,
        ]}
      >
        <Form
          form={form1}
          name="basic"
          wrapperCol={{ span: 24 }}
          onFinish={() => handleOkCreate(1)}
          autoComplete="off"
        >
          <b>
            Masukkan Kriteria Seminar<span style={{ color: 'red' }}> *</span>
          </b>
          <Form.Item
            name="namaKriteria"
            rules={[{ required: true, message: 'Kriteria tidak boleh kosong!' }]}
          >
            <Input onChange={(e) => setCriteriaName(e.target.value)} />
          </Form.Item>
        </Form>
      </Modal>

      <Modal
        title="Ubah Kriteria"
        // visible={getEditModal(item.name)}
        visible={isModalEditVisible}
        onOk={form2.submit}
        // onCancel={() => handleCancelEdit(item.name)}
        onCancel={handleCancelEdit}
        width={600}
        zIndex={9999999}
        footer={[
          <Button key="back" onClick={handleCancelEdit}>
            Batal
          </Button>,
          <Button loading={loadings[0]} key="submit" type="primary" onClick={form2.submit}>
            Simpan
          </Button>,
        ]}
      >
        <Form
          form={form2}
          name="basic"
          wrapperCol={{ span: 24 }}
          onFinish={() => handleOkEdit(0)}
          autoComplete="off"
          fields={[
            {
              name: ['namaKriteriaEdit'],
              value: choose.criteria_name,
            },
          ]}
        >
          <b>
            Masukkan Perubahan Kriteria
            {/* <span style={{ color: "red" }}> *</span> */}
          </b>
          <Form.Item
            name="namaKriteriaEdit"
            rules={[{ required: true, message: `Nama Kriteria Seminar tidak boleh kosong!` }]}
          >
            <Input
              onChange={(e) => {
                setChoose((prev) => {
                  return { ...prev, criteria_name: e.target.value }
                })
              }}
              value={choose.criteria_name}
            />
          </Form.Item>
        </Form>
      </Modal>
    </>
  )
}
export default FormulirKriteriaSeminar
